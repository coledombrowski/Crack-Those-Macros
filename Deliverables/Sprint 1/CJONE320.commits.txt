from flask import Flask, request,jsonify
from flask_login import LoginManager, UserMixin, login_user, current_user, login_required, logout_user
from dotenv import load_dotenv
import pyodbc 
import pandas as pd 
import os

# App Initialization
app = Flask(__name__)
app.secret_key = os.getenv('APP_SECRET_KEY')

# Database Initialization
load_dotenv()
db_server = os.getenv('DB_SERVER')
db_database = os.getenv('DB_NAME')
db_username = os.getenv('DB_USERNAME')
db_password = os.getenv('DB_PASSWORD')
db_driver = os.getenv('DB_DRIVER')
db_conn_str = f'DRIVER={db_driver};SERVER={db_server};DATABASE={db_database};UID={db_username};PWD={db_password}' 

# User Login Initialization
login_manager = LoginManager()
login_manager.init_app(app)
class User(UserMixin):
	pass

# App - Home Page
@app.route("/")
def home_page():
	return # TODO: Implement homepage/dashboard

# App - Account Creation Page
@app.route("/register-account", methods=['POST'])
def account_creation_page():
	error_message = ''
	hasCreatedUser = False

	username = request.json['username']
	password = request.json['password']

	# Check if User already exists
	db_connection = pyodbc.connect(db_conn_str)
	cursor = db_connection.cursor()
	query = f"SELECT COUNT(*) FROM [dbo].[Users] WHERE Username = '{username}'"
	cursor.execute(query)
	count = cursor.fetchone()[0]
	
	if (count != 0):
		error_message = 'An account could not be created - Try a unique Username'

	# Create the new User
	else:
		new_user = {
			'username': username,
			'password': password
		}
		sql_command = f"""
			INSERT INTO [dbo].[Users] (Username, Password, Is_First_Login)
			VALUES ('{username}', '{password}', 1)
		"""
		cursor.execute(sql_command)
		hasCreatedUser = True
	
	# Commit the changes and close the connection 
	db_connection.commit() 
	cursor.close() 
	db_connection.close()

	# Send Response
	if (hasCreatedUser):
		return {
			"result": "Success",
			"message": "An account has been created"
		}, 200
	else:
		return {
			"result": "Failed",
			"message": error_message
		}, 400
		
# App - Login Page
@app.route("/login-user", methods=['POST'])
def login_page():
	if current_user.is_active:
		return {
			"result": "Failed",
			"message": "Error - User is already logged in"
		}, 400
	
	username = request.json['username']
	password = request.json['password']

	# Check for User Credentials
	db_connection = pyodbc.connect(db_conn_str)
	query = f"SELECT * FROM [dbo].[Users] WHERE Username = '{username}'"
	user_result = pd.read_sql_query(query, db_connection)
	# Commit the changes and close the connection
	db_connection.close()

	# Send Response
	if (not user_result.empty) and (user_result['Password'][0] == password):
		user = User()
		user.id = username
		user.is_first_login = user_result['Is_First_Login'][0]
		
		login_user(user)
		return {
			"username": user.id,
			"isFirstLogin": str(user.is_first_login)
		}, 200
	
	else:
		return {
			"result": "Failed",
			"message": "Account details are invalid"
		}, 401
		
# App - Logout Page
@app.route('/logout')  
def logout_page():  
    if current_user.is_active: 
        logout_user()  
        return {
			"result": "Success",
			"message": "Logged out successfully"
		}, 200
		
    else:
        return {
			"result": "Failed",
			"message": "Error - You are not logged in"
		}, 500

# Flask-Login Helper
@login_manager.user_loader  
def user_loader(username):  
    user = User()  
    user.id = username
    return user

# Run Server
if __name__ == '__main__':
	app.run(debug=True)

